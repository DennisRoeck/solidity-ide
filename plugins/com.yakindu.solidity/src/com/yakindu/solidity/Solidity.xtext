/**
 * Copyright (c) 2017 committers of YAKINDU and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 * 	Andreas Muelder - Itemis AG - initial API and implementation
 * 	Karsten Thoms   - Itemis AG - initial API and implementation
 * 	Florian Antony  - Itemis AG - initial API and implementation
 * 	committers of YAKINDU 
 * 
 */

/**
 * 
 * @author andreas muelder
 * @author florian antony
 * 
 */
grammar com.yakindu.solidity.Solidity with org.eclipse.xtext.common.Terminals

generate solidity "http://www.yakindu.com/solidity/Solidity"
import "http://www.yakindu.org/base/expressions/Expressions" as expressions
import "http://www.eclipse.org/emf/2002/Ecore"
import "http://www.yakindu.org/base/types/2.0.0" as types

SolidityModel:
	(sourceunit+=SourceUnit)*;

SourceUnit returns types::Package:
	{SourceUnit}
	((pragma+=PragmaDirective)*
	(imports+=ImportDirective)*
	member+=ContractDefinition);

PragmaDirective returns types::PackageMember:
	PragmaSolidityDirective | PragmaExperimentalDirective;

PragmaSolidityDirective returns PragmaDirective:
	{PragmaSolidityDirective} 'pragma' 'solidity' version=VERSION ';';

PragmaExperimentalDirective returns PragmaDirective:
	{PragmaExperimentalDirective} 'pragma' 'experimental' value=STRING ';';

ImportDirective returns types::PackageMember:
	{ImportDirective} 'import' importedNamespace=STRING ('as' alias=STRING)? ';';

ContractDefinition returns types::ComplexType:
	{ContractDefinition} type=ContractType name=ID
	('is' superTypes+=[types::ComplexType|QID] (argumentList+=SuperTypeArgumentList)? (','
	superTypes+=[types::ComplexType|QID] ((argumentList+=SuperTypeArgumentList)? ')')?)*)?
	'{' (features+=ContractPart)* '}';

SuperTypeArgumentList:
	{SuperTypeArgumentList} '(' (arguments+=Expression (',' arguments+=Expression)*)? ')';

enum ContractType:
	CONTRACT='contract' | LIBRARY='library' | INTERFACE='interface';

ContractPart returns types::Declaration:
	StateVariableDefinition | UsingForDeclaration | ModifierDefinition | FunctionDefinition | ConstructorDefinition |
	EventDefinition |
	TypeDefinition;

UsingForDeclaration returns types::Declaration:
	{UsingForDeclaration} 'using' contract=[ContractDefinition|ID] 'for' ('*' | typeSpecifier=SimpleTypeSpecifier) ';';

StateVariableDefinition returns types::Property:
	{VariableDefinition} typeSpecifier=TypeSpecifier ((visibility=Visibility)? & ('constant')?) name=ID ('='
	initialValue=Expression)? ';';

enum StorageLocation:
	MEMORY='memory' | STORAGE='storage';

VariableDeclaration returns types::Property:
	{VariableDefinition} typeSpecifier=TypeSpecifier (storage=StorageLocation)? name=ID;

enum Visibility:
	PUBLIC='public' | INTERNAL='internal' | PRIVATE='private';

enum Unit:
	SECONDS='seconds' | MINUTES='minutes' | HOURS='hours' | DAYS='days' | WEEKS='weeks' | YEARS='years' | WEI='wei' |
	FINNEY='finney' | SZABO='szabo' | ETHER='ether';

	//TODO This is a hack.
TypeDefinition returns types::Declaration:
	{TypeDefinition} definition=(StructDefinition | EnumDefinition);

StructDefinition returns types::ComplexType:
	{StructDefinition} 'struct' name=ID '{' (features+=VariableDeclaration ';')* '}';

EnumDefinition returns types::EnumerationType:
	'enum' name=ID '{' (enumerator+=Enumerator (',' enumerator+=Enumerator)*)? '}';

Enumerator returns types::Enumerator:
	name=ID;

ModifierDefinition returns types::Operation:
	{ModifierDefinition} 'modifier' name=ID ('(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')')? block=Block;

Block:
	'{' {Block} (statements+=Statement)* '}';

ConstructorDefinition returns types::Operation:
	{ConstructorDefinition} 'constructor' '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
	(modifier+=Modifier)* block=Block;

EventDefinition returns types::Operation:
	{EventDefinition} 'event' name=ID '(' (parameters+=IndexParameter (',' parameters+=IndexParameter)*)? ')' ';';

FunctionDefinition returns types::Operation:
	{FunctionDefinition} 'function' name=ID? '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
	(modifier+=Modifier)* ('returns' '(' (returnParameters+=Parameter (',' returnParameters+=Parameter)*)? ')')? (';' |
	(block=Block));

Modifier:
	ModifierInvocation | BuildInModifier;

BuildInModifier:
	type=FunctionModifier;

enum FunctionModifier:
	EXTERNAL='external' | PUBLIC='public' | INTERNAL='internal' | PRIVATE='private' | PURE='pure' | CONSTANT='constant' |
	VIEW='view' | PAYABLE='payable';

ModifierInvocation:
	{ModifierInvocation} reference=[types::Operation|ID] ('(' (arguments+=Argument (',' arguments+=Argument)*)? ')')?;

Parameter returns types::Parameter:
	{Parameter} typeSpecifier=TypeSpecifier (storage=StorageLocation)? (name=ID)?;

IndexParameter returns types::Parameter:
	{IndexParameter} typeSpecifier=TypeSpecifier (indexed?="indexed")? (name=ID)?;

Statement:
	IfStatement | WhileStatement | ForStatement | Block | InlineAssemblyStatement | (ThrowStatement | ReturnStatement |
	DeleteStatement | ContinueStatement | BreakStatement | SimpleStatement | PlaceholderStatement) ';';

ThrowStatement:
	{ThrowStatement} 'throw';

SimpleStatement:
	VariableDefinition | ExpressionStatement;

PlaceholderStatement:
	{PlaceholderStatement} '_';

ReturnStatement:
	{ReturnStatement} 'return' (expression=Expression)?;
	//TODO Why is this an expression in solidity grammar?
DeleteStatement:
	{DeleteStatement} 'delete' expression=Expression;

ContinueStatement:
	{ContinueStatement} 'continue';

BreakStatement:
	{BreakStatement} 'break';

ExpressionStatement:
	expression=Expression;

InlineAssemblyStatement:
	'assembly' kind=AssemblyKind? block=InlineAssemblyBlock;

enum AssemblyKind:
	EVMASM="evmasm";

VariableDefinitionProperty returns types::Property:
	VariableDefinition;

VariableDefinition:
	('var' identifier=IdentifierList | (typeSpecifier=TypeSpecifier (storage=StorageLocation)? name=ID)) ('='
	initialValue=Expression)?;

IdentifierList:
	{IdentifierList} (identifier+=Identifier | ('(' ((identifier+=Identifier)? (',' (identifier+=Identifier)?)*) ')'));

Identifier returns types::Declaration:
	{Identifier} name=ID;

IfStatement:
	'if' '(' condition=Expression ')' then=Statement (=> 'else' else=Statement)?;

WhileStatement:
	'while' '(' condition=Expression ')' body=Statement;

ForStatement:
	'for' '(' (initialization=SimpleStatement)? ';' (condition=Expression)? ';' (afterthought=Expression)? ')'
	statement=Statement;

InlineAssemblyBlock:
	{InlineAssemblyBlock} '{' (items+=AssemblyItem)* '}';

AssemblyItem returns EObject:
	(FunctionalAssemblyExpression | InlineAssemblyBlock | AssemblyLocalBinding | AssemblyAssignment | AssemblyLabel |
	DecimalNumberLiteral | IDLiteral | AddressLiteral);

AssemblyLocalBinding:
	'let' label=AssemblyID ':=' expression=(FunctionalAssemblyExpression | DecimalNumberLiteral);

AssemblyAssignment:
	(leftOperand=AssemblyID ':=' expression=FunctionalAssemblyExpression) | ('=:' rightOpernd=AssemblyID);

AssemblyLabel:
	label=AssemblyID ':';

FunctionalAssemblyExpression:
	=> label=AssemblyID ('(' (parameters+=AssemblyItem (',' parameters+=AssemblyItem)*)? ')')?;

IDLiteral:
	value=AssemblyID;

AssemblyID:
	ID | Keyword;

Keyword:
	'return';

Literal returns expressions::Literal:
	BoolLiteral | DecimalNumberLiteral | AddressLiteral | BinaryLiteral | StringLiteral | NullLiteral;

BoolLiteral:
	{BoolLiteral} value=BOOL;

DecimalNumberLiteral:
	value=DECIMAL (unit=Unit)?;

AddressLiteral:
	value=ADDRESS;

BinaryLiteral:
	{BinaryLiteral} value=BINARY;

StringLiteral:
	{StringLiteral} value=STRING;

NullLiteral:
	{NullLiteral} 'null';

Expression returns expressions::Expression:
	AssignmentExpression;

AssignmentExpression returns expressions::Expression:
	ConditionalExpression ({expressions::AssignmentExpression.varRef=current} operator=AssignmentOperator
	expression=ConditionalExpression)*;

ConditionalExpression returns expressions::Expression:
	LogicalOrExpression ({expressions::ConditionalExpression.condition=current} '?' trueCase=LogicalOrExpression ':'
	falseCase=LogicalOrExpression)?;

LogicalOrExpression returns expressions::Expression:
	LogicalAndExpression ({expressions::LogicalOrExpression.leftOperand=current} '||'
	rightOperand=LogicalAndExpression)*;

LogicalAndExpression returns expressions::Expression:
	LogicalNotExpression ({expressions::LogicalAndExpression.leftOperand=current}
	'&&' rightOperand=LogicalNotExpression)*;

LogicalNotExpression returns expressions::Expression:
	LogicalRelationExpression | {expressions::LogicalNotExpression} '!'
	operand=LogicalRelationExpression;

LogicalRelationExpression returns expressions::Expression:
	BitwiseXorExpression
	({expressions::LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	rightOperand=BitwiseXorExpression)*;

BitwiseXorExpression returns expressions::Expression:
	BitwiseOrExpression ({expressions::BitwiseXorExpression.leftOperand=current} '^'
	rightOperand=BitwiseOrExpression)*;

BitwiseOrExpression returns expressions::Expression:
	BitwiseAndExpression ({expressions::BitwiseOrExpression.leftOperand=current} '|'
	rightOperand=BitwiseAndExpression)*;

BitwiseAndExpression returns expressions::Expression:
	ShiftExpression ({expressions::BitwiseAndExpression.leftOperand=current} '&'
	rightOperand=ShiftExpression)*;

ShiftExpression returns expressions::Expression:
	NumericalAddSubtractExpression ({expressions::ShiftExpression.leftOperand=current} operator=ShiftOperator
	rightOperand=NumericalAddSubtractExpression)*;

NumericalAddSubtractExpression returns expressions::Expression:
	NumericalMultiplyDivideExpression
	=> ({expressions::NumericalAddSubtractExpression.leftOperand=current}
	operator=AdditiveOperator
	rightOperand=NumericalMultiplyDivideExpression)*;

NumericalMultiplyDivideExpression returns expressions::Expression:
	ExponentialExpression
	=> ({expressions::NumericalMultiplyDivideExpression.leftOperand=current}
	operator=MultiplicativeOperator
	rightOperand=ExponentialExpression)*;

ExponentialExpression returns expressions::Expression:
	NumericalUnaryExpression
	=> ({ExponentialExpression.leftOperand=current}
	'**'
	rightOperand=NumericalUnaryExpression)*;

NumericalUnaryExpression returns expressions::Expression:
	PostFixUnaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PostFixUnaryExpression;

PostFixUnaryExpression returns expressions::Expression:
	PrimaryExpression ({expressions::PostFixUnaryExpression.operand=current} operator=PostFixOperator)*;

PrimaryExpression returns expressions::Expression:
	PrimitiveValueExpression | FeatureCall | NewInstanceExpression | EmitExpression | TupleExpression;

NewInstanceExpression returns expressions::FeatureCall:
	{NewInstanceExpression} 'new' type=TypeSpecifier operationCall?='(' (arguments+=Argument (',' arguments+=Argument)*)?
	')';

EmitExpression returns expressions::FeatureCall:
	{EmitExpression} 'emit' event=[EventDefinition|ID] operationCall?='(' (arguments+=Argument (','
	arguments+=Argument)*)? ')';

TupleExpression returns expressions::Expression:
	{TupleExpression} (('(' (expressions+=Expression (',' expressions+=Expression)*)? ')') | ('['
	(expressions+=Expression (',' expressions+=Expression)*)? ']'));

PrimitiveValueExpression returns expressions::PrimitiveValueExpression:
	{PrimitiveValueExpression} value=Literal;

FeatureCall returns expressions::Expression:
	ElementReferenceExpression ({expressions::FeatureCall.owner=current} '.' feature=[EObject]
	(=> operationCall?='(' (arguments+=Argument (',' arguments+=Argument)*)? ')'
	|
	=> (arrayAccess?='[' arraySelector+=Expression ']') => ('[' arraySelector+=Expression ']')*)?)*;

ElementReferenceExpression returns expressions::ElementReferenceExpression:
	{expressions::ElementReferenceExpression} reference=[EObject|ID] (=> operationCall?='(' (((arguments+=SimpleArgument
	(',' arguments+=SimpleArgument)*)?) | ('{' (arguments+=NamedArgument (',' arguments+=NamedArgument)*)? '}')) ')')?
	('[' arraySelector+=Expression ']')*;

Argument returns expressions::Argument:
	SimpleArgument | NamedArgument;

NamedArgument:
	reference=[EObject] ':' value=ConditionalExpression;

SimpleArgument:
	value=ConditionalExpression;

ParenthesizedExpression returns expressions::Expression:
	{expressions::ParenthesizedExpression} '(' expression=Expression ')';

TypeSpecifier returns types::TypeSpecifier:
	SimpleTypeSpecifier | MappingTypeSpecifier | ArrayTypeSpecifier;

MappingTypeSpecifier:
	{MappingTypeSpecifier} 'mapping' '(' key=TypeSpecifier '=>' value=TypeSpecifier ')';

ArrayTypeSpecifier: //TODO index must be Expression
	{ArrayTypeSpecifier} type=[types::Type|QID] ('[' (index+=PrimitiveValueExpression)? ']')+;

SimpleTypeSpecifier returns TypeSpecifier:
	type=[types::Type|QID];

enum AssignmentOperator returns expressions::AssignmentOperator:
	assign='='
	| multAssign='*='
	| divAssign='/='
	| modAssign='%='
	| addAssign='+='
	| subAssign='-='
	| leftShiftAssign='<<='
	| rightShiftAssign='>>='
	| andAssign='&='
	| xorAssign='^='
	| orAssign='|=';

	//TODO: Add increment and decrement
enum UnaryOperator:
	increment="++" | decrement="--" | positive='+' | negative='-' | complement='~';

enum RelationalOperator returns expressions::RelationalOperator:
	smaller='<' | smallerEqual='<=' | greater='>' | greaterEqual='>=' |
	equals='==' | notEquals='!=';

enum MultiplicativeOperator returns expressions::MultiplicativeOperator:
	mul='*' | div='/' | mod='%';

enum ShiftOperator returns expressions::ShiftOperator:
	left='<<'
	| right='>>';

enum AdditiveOperator returns expressions::AdditiveOperator:
	plus='+' | minus='-';

enum PostFixOperator returns expressions::PostFixOperator:
	increment="++" | decrement="--";

terminal ADDRESS returns EBigInteger:
	('0x') ('0'..'9' | 'a'..'f' | 'A'..'F')+;

terminal DECIMAL returns EBigDecimal:
	('0'..'9')+ ('.' ('0'..'9')*)? (('e' | 'E') ('0'..'9')+)?;

terminal VERSION:
	'^' INT . INT . INT;

terminal BOOL returns EBoolean:
	'true' | 'false';

terminal HEX returns EInt:
	('0') ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;

terminal BINARY returns EInt:
	('0') ('b' | 'B') ('0' | '1')+;

QID:
	ID ('.' ID)*;

